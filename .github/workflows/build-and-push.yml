name: Test, Build and Push Docker Image

# This workflow runs on pushes to the main branch.
on:
  push:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    name: Run Pytest
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          # We need to provide dummy values for the environment variables
          # that Pydantic settings expects, otherwise the app will fail to load.
          export SUPABASE_URL="http://dummy-url.com"
          export SUPABASE_KEY="dummy-key"
          source venv/bin/activate
          pytest
  
  build-and-push:
    name: Build and Push API to Docker Hub
    runs-on: ubuntu-latest
    # This job depends on the 'test' job and will only run if it succeeds
    needs: test

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # The image name will be like 'your-dockerhub-username/movie-serving-api'
          images: ${{ secrets.DOCKERHUB_USERNAME }}/movie-serving-api

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
